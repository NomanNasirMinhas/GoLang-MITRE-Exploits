// T1021.001 - Remote Services: Remote Desktop Protocol
package main

import (
	"fmt"
	"os"
	"os/exec"
)

const OLD_Remote_Port = 3389
const NEW_Remote_Port = 4489

func main() {
	//Check if the user is root
	if !isAdmin() {
		fmt.Println("This program must be run as root")
		pressEnterToContinue()
		os.Exit(1)
	}
	fmt.Println("Changing RDP Port from 3389 to 4489")
	pressEnterToContinue()
	cmd := fmt.Sprintf("Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value %d New-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort %d", NEW_Remote_Port, NEW_Remote_Port)
	res, output := execute_command(cmd, true)
	if res {
		fmt.Println("Port Changed Successfully")
		pressEnterToContinue()
	} else {
		fmt.Println("Error: ", output)
		pressEnterToContinue()
	}

	fmt.Println("Cleaning up...")
	cleanup()
	pressEnterToContinue()
}

func isAdmin() bool {
	cmd := exec.Command("net", "session")
	err := cmd.Run()
	if err != nil {
		return false
	} else {
		return true
	}
}

func execute_command(cmd string, isPowershell bool) (bool, string) {
	cmd_shell := "powershell"
	if !isPowershell {
		cmd_shell = "cmd"
	}
	// Run Command and Capture Output as well as Error
	out, err := exec.Command(cmd_shell, "/C", cmd).CombinedOutput()
	cmd_out := string(out)
	return err == nil, string(cmd_out)
}

func cleanup() {
	cmd := fmt.Sprintf("Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value %d New-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort %d", OLD_Remote_Port, OLD_Remote_Port)
	res, output := execute_command(cmd, true)
	if res {
		fmt.Println("Port Changed Successfully")
	} else {
		fmt.Println("Error: ", output)
	}
}

func pressEnterToContinue() {
	fmt.Println("Press ENTER to continue...")
	fmt.Scanln()
}
